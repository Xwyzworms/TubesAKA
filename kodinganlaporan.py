# -*- coding: utf-8 -*-
"""KodinganLaporan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ci0hglZo_dAsLzq5bkwJR39N_NS0Wjqv
"""

import numpy as np
import time
import matplotlib.pyplot as plt
np.random.seed(5)

def insertion_Sort(arr):
  for i in range(1, len(arr)):
    key = arr[i]
    before = i - 1
    while before >= 0 and key < arr[before]:
      arr[before + 1] = arr[before]
      before = before - 1
    arr[before + 1] = key
  return arr


def bucket_sort(arr,Slotbucket=10):
  '''
  I.S : Array telah Terbentuk dengan n elements dan belum ter-urut
  F.S : Array telah terurut dengan algoritma BucketSort

  Arr : Adalah Array dengan N elements
  '''

  ''' Inisiasi Jumlah bucket 
      Inisiasi Variable LokasiBucket
      Inisiasi List untuk Bucket yang telah tersorting
  '''

  buckets = [] 
  bucketLocation = 0
  Sortedbucket = []
  # Buat Bucket dengan jumlah Slotbucket
  for i in range(0,Slotbucket): 
    buckets.append([])

  # #Masukan Element yang ada pada array ke bucket yang sesuai
  for i in range(0, len(arr)): 
    bucketLocation = int( arr[i]  * Slotbucket)
    buckets[bucketLocation].append(arr[i])

 # Lakukan Sorting pada setiap Bucket
  for i in range(0, len(buckets)):
    buckets[i] = insertion_Sort(buckets[i])
  #Concatenate Bucket menjadi satu 
  for i in range(Slotbucket):
    for j in range(len(buckets[i])):
      Sortedbucket.append(buckets[i][j])
  
  return np.array(Sortedbucket)

np.random.seed(5)
nums = np.random.random(10)
print(f"Array Sebelum di Sort \n{nums}")
begin = time.time()
print(f"\nArray setelah di sort dengan bucket sort\n")
print(bucket_sort(nums,10))
end = time.time()
print(f"\nDengan Waktu Eksekusi {end-begin} Second")

np.random.seed(5)
def bubblesort(arr):
  '''
  I.S : Array telah terbentuk dengan n elements dan belum terurut
  F.S : Array Telah Terurut dengan algoritma bubblesort

  arr : Array dengan N Elements
  '''

  for i in range(0,len(arr)):
    for j in range(0,len(arr)-i-1): 
      if arr[j] > arr[j+1]: 
        arr[j] , arr[j+1] = arr[j+1] , arr[j] 
  return arr

  
np.random.seed(5)
nums = np.random.random(10)
print(f"Array Sebelum di Sort \n{nums}")
begin = time.time()
print(f"\nArray setelah di sort dengan Bubble sort \n{bubblesort(nums)}")
end = time.time()
print(f"\nDengan Waktu Eksekusi {end-begin} second")

np.random.seed(5)
print(np.random.random(10))
WaktuEksekusiBucket = {10:0 , 100: 0 ,1000:0 , 10000:0, 100000:0, 1000000:0 }

ans=[]
input_size = [10,100,1000,10000,100000,1000000]
for i in input_size:
  rata_rata = []
  print(f'Saat ini ada pada {i}')
  for j in range(10):
    nums = np.random.random(i)
    begin = time.time()
    ans.append(bucket_sort(nums,len(nums)))
    end = time.time()
    rata_rata.append(end-begin)
  WaktuEksekusiBucket[i] = np.mean(rata_rata)  
WaktuEksekusiBucket

{10: 3.516674041748047e-05,
 100: 0.0001966714859008789,
 1000: 0.0017571687698364259,
 10000: 0.022615933418273927,
 100000: 0.2713597774505615}

WaktuEksekusiBubble = {10:0 , 100: 0 ,1000:0 , 10000:0, 100000:0 }

input_size = [10]
np.random.seed(5)
ans = []
print(np.random.random(10))
for i in input_size:
  rata_rata = []
  print(f'Saat ini ada pada {i}')
  for j in range(10):
    nums = np.random.random(i)
    #print(f"Array Sebelum di Sort \n{nums}")
    begin = time.time()
    ans.append(bubblesort(nums))
    end = time.time()
    rata_rata.append(end-begin)
  WaktuEksekusiBubble[i] = np.mean(rata_rata)  
WaktuEksekusiBubble

np.random.seed(5)
elapsedTimeBubble={}
inputsize=[10,100,1000,10000,100000]
RunningTime=[]

for i in inputsize:
  begin = time.time()
  print(i)
  random = np.random.random(size=i)
  bubblesort(random)
  end = time.time()
  print(end-begin)
  elapsedTimeBubble[i] = end-begin 
  
print(elapsedTimeBubble)

elapsedTimeBucket = {10: 3.516674041748047e-05,
 100: 0.0001966714859008789,
 1000: 0.0017571687698364259,
 10000: 0.022615933418273927,
 100000: 0.2713597774505615}
 
elapsedTimeBubble = {10: 0.0007665157318115234, 100: 0.002446889877319336, 1000: 0.24569916725158691, 10000: 24.04032564163208, 100000: 2410.018307209015}
inputsize=[10,100,1000,10000,100000]
f, ax = plt.subplots(1,3,figsize=(15,6))
print(ax)
ax[0].plot(inputsize,list(elapsedTimeBucket.values()))
ax[0].set(title="Bucket Sort",xlabel="Inputsize",ylabel="Time in Second")
ax[1].plot(inputsize,list(elapsedTimeBubble.values()))
ax[1].set(title="Bubble Sort",xlabel="Inputsize",ylabel="Time in Second")
ax[2].plot(inputsize,list(elapsedTimeBubble.values()),
           inputsize,list(elapsedTimeBucket.values()))
ax[2].set(title="Both Sorting",xlabel="Inputsize",ylabel="Time in Second")
ax[2].legend(["Bubble","Bucket"])
f.tight_layout()